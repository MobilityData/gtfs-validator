/*
 * Copyright 2021 Google LLC, MobilityData IO
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.mobilitydata.gtfsvalidator.outputcomparator.model;

import com.google.common.collect.ImmutableMap;
import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;

/**
 * Model class used to represent the content of the file generated by
 * scripts/mobility-database-harvester/harvest_latest_versions.py. Provides utility method to
 * retrieve a {@code String} URL from a source id value.
 */
public class SourceUrlContainer {
  private final Map<String, String> urlsByArchiveId;
  private static final transient Gson GSON = new GsonBuilder().serializeNulls().create();

  public SourceUrlContainer(Path pathToFile) throws IOException {
    Type type = new TypeToken<Map<String, String>>() {}.getType();
    this.urlsByArchiveId = GSON.fromJson(Files.newBufferedReader(pathToFile), type);
  }

  public SourceUrlContainer(ImmutableMap<String, String> urlsByArchiveId) {
    this.urlsByArchiveId = urlsByArchiveId;
  }

  public String getUrlForSourceId(String sourceId) {
    return urlsByArchiveId.get(sourceId);
  }

  public boolean hasSourceId(String sourceId) {
    return urlsByArchiveId.containsKey(sourceId);
  }
}
