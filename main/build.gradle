/*
 * Copyright 2020 Google LLC, MobilityData IO
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'java'
}

applicationDefaultJvmArgs = [ "-Xmx8G" ]

group 'org.mobilitydata'
version "${System.getenv("versionTag")}"

group 'org.mobilitydata'
version "${System.getenv("versionTag")}_cli"

jar {
    // Add the manifest within the JAR, using gtfs-validator as the title
    manifest {
        attributes('Implementation-Title': rootProject.name,
                'Implementation-Version': project.version,
                'Main-Class': 'org.mobilitydata.gtfsvalidator.cli.Main',
                'Multi-Release': 'true')
    }
}

shadowJar {
    minimize {
        exclude(dependency('org.apache.httpcomponents:httpclient'))
    }
    // Change the JAR name from cli-app to gtfs-validator
    archiveBaseName = rootProject.name
    // Remove "-all" from the end of the JAR file name
    archiveClassifier = null
    // Add "v" to version to match previous releases
    archiveVersion = project.version
}

sourceCompatibility = JavaVersion.VERSION_11
mainClassName = 'org.mobilitydata.gtfsvalidator.cli.Main'
compileJava.options.encoding = "UTF-8"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor project(':processor')
    compileOnly project(':processor')
    implementation project(':core')
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.0.3'
    implementation 'com.beust:jcommander:1.48'
    implementation 'javax.inject:javax.inject:1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.google.flogger:flogger:0.6'
    implementation 'com.google.flogger:flogger-system-backend:0.6'
    implementation 'com.univocity:univocity-parsers:2.9.0'
    implementation 'com.google.geometry:s2-geometry:2.0.0'
    implementation 'com.sparkjava:spark-core:2.9.3' // Spark web framework.

    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation 'com.google.truth:truth:1.0.1'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:1.0.1'
}

test {
    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Share the test report data to be aggregated for the whole project
configurations {
    binaryTestResultsElements {
        canBeResolved = false
        canBeConsumed = true
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'test-report-data'))
        }
        outgoing.artifact(test.binaryResultsDirectory)
    }
}

ext {
    viewerDir = "$projectDir/src/main/java/org/mobilitydata/gtfsvalidator/viewer/"
}

task installSnabbdom(type: Exec) {
  inputs.file "$projectDir/js/snabbdom-umd/package.json"
  outputs.dir "$projectDir/js/snabbdom-umd/build"

  workingDir "$projectDir/js/snabbdom-umd"
  executable 'npm'
  args 'install'
}

task rollupSnabbdomUjs(type: Exec) {
  dependsOn installSnabbdom
  inputs.file "$projectDir/js/snabbdom-umd/package.json"
  outputs.file "$projectDir/js/snabbdom-umd/build/snabbdom.browser.js"

  workingDir "$projectDir/js/snabbdom-umd"
  executable './node_modules/.bin/rollup'
  args './node_modules/snabbdom/build/index.js', '--format', 'umd', '--name', 'snabbdom', '--file', "$viewerDir" + "/snabbdom.browser.js"
}

// Utility class for generateViewerAssets task.
class FileToLiteralString {
    static String escapeString(String s) {
        var backslash = java.util.regex.Pattern.compile("\\\\")
        var doublequote = java.util.regex.Pattern.compile("\"")
        var escapedBackslashes = backslash.matcher(s).replaceAll("\\\\\\\\")
        var escaptedQuotes = doublequote.matcher(escapedBackslashes).replaceAll("\\\\\\\"")
        return "\"" + escaptedQuotes + "\\n\""
    }

    static void generateMethod(FileWriter out, String assetFilename, String methodName) {
        var file = new FileReader(assetFilename)
        out.println "  public static String " + methodName + "() {"
        var i = 0
        file.eachLine { line ->
            if (i++ == 0) {
                out.print "    return " + FileToLiteralString.escapeString(line)
            } else {
                out.print "\n        + " + FileToLiteralString.escapeString(line)
            }
        }
        out.println ";"
        out.println "  }"
    }
}

task generateViewerAssets {
    dependsOn rollupSnabbdomUjs

    outputs.file "$viewerDir/ViewerAssets.java"
    inputs.file "$viewerDir/index.css"
    inputs.file "$viewerDir/index.js"
    inputs.file "$viewerDir/snabbdom.browser.js"
    inputs.file "$viewerDir/form.html"

    doFirst {
        var viewerAssets = new FileWriter(viewerDir + "ViewerAssets.java")

        // Copy the license text and class name from a boilerplate file.
        var viewerAssetsBoiler = new FileReader(viewerDir + "ViewerAssets.boilerplate.java.fragment")
        viewerAssets.println "// Code generated by gradle generateViewerAssets; DO NOT EDIT."
        viewerAssetsBoiler.eachLine { line ->
            viewerAssets.println line
        }

        // Generate a method for each asset file, which returns its contents as
        // a literal string.
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + "index.css", "IndexCss")

        // google-java-style validator prefers one blank line between methods.
        viewerAssets.println ""
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + 'index.js', "IndexJs")

        viewerAssets.println ""
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + 'snabbdom.browser.js', "SnabbdomBrowserJs")

        viewerAssets.println ""
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + 'form.html', "FormHtml")

        viewerAssets.println "}" // Final closing brace.
        viewerAssets.close()
    }
}

build {
    dependsOn generateViewerAssets
}

compileJava {
    dependsOn generateViewerAssets
}

