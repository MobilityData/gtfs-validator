/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.mobilitydata.gtfsvalidator.validator;

import static com.google.common.truth.Truth.assertThat;

import java.util.List;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.mobilitydata.gtfsvalidator.notice.NoticeContainer;
import org.mobilitydata.gtfsvalidator.notice.StartAndEndRangeEqualNotice;
import org.mobilitydata.gtfsvalidator.notice.StartAndEndRangeOutOfOrderNotice;
import org.mobilitydata.gtfsvalidator.notice.ValidationNotice;
import org.mobilitydata.gtfsvalidator.table.GtfsFrequency;
import org.mobilitydata.gtfsvalidator.type.GtfsTime;

// FIXME: Cover autogenerated end-range validators by unit tests in "processor".

@RunWith(JUnit4.class)
public class GtfsFrequencyEndRangeValidatorTest {

  private static List<ValidationNotice> generateNotices(GtfsFrequency frequency) {
    NoticeContainer noticeContainer = new NoticeContainer();
    GtfsFrequencyEndRangeValidator validator = new GtfsFrequencyEndRangeValidator();
    validator.validate(frequency, noticeContainer);
    return noticeContainer.getValidationNotices();
  }

  @Test
  public void inOrder_yieldsNoNotice() {
    assertThat(
            generateNotices(
                new GtfsFrequency.Builder()
                    .setCsvRowNumber(2)
                    .setStartTime(GtfsTime.fromString("10:00:00"))
                    .setEndTime(GtfsTime.fromString("11:00:00"))
                    .build()))
        .isEmpty();
  }

  @Test
  public void outOfOrder_yieldsNotice() {
    assertThat(
            generateNotices(
                new GtfsFrequency.Builder()
                    .setCsvRowNumber(2)
                    .setStartTime(GtfsTime.fromString("11:00:00"))
                    .setEndTime(GtfsTime.fromString("10:00:00"))
                    .build()))
        .containsExactly(
            new StartAndEndRangeOutOfOrderNotice(
                "frequencies.txt", 2, "start_time", "11:00:00", "end_time", "10:00:00"));
  }

  @Test
  public void equal_yieldsNotice() {
    assertThat(
            generateNotices(
                new GtfsFrequency.Builder()
                    .setCsvRowNumber(2)
                    .setStartTime(GtfsTime.fromString("10:00:00"))
                    .setEndTime(GtfsTime.fromString("10:00:00"))
                    .build()))
        .containsExactly(
            new StartAndEndRangeEqualNotice(
                "frequencies.txt", 2, "start_time", "end_time", "10:00:00"));
  }

  @Test
  public void fieldMissing_yieldsNoNotice() {
    // start_time and end_time are required according to GTFS standard, but the generated validator
    // handles missing fields gracefully anyway.
    assertThat(
            generateNotices(
                new GtfsFrequency.Builder()
                    .setCsvRowNumber(2)
                    .setStartTime(GtfsTime.fromString("10:00:00"))
                    .build()))
        .isEmpty();
    assertThat(
            generateNotices(
                new GtfsFrequency.Builder()
                    .setCsvRowNumber(2)
                    .setEndTime(GtfsTime.fromString("10:00:00"))
                    .build()))
        .isEmpty();
  }
}
