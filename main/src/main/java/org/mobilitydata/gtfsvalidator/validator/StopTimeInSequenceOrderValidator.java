/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.mobilitydata.gtfsvalidator.validator;

import com.google.common.collect.Multimaps;
import java.util.List;
import javax.inject.Inject;
import org.mobilitydata.gtfsvalidator.annotation.GtfsValidator;
import org.mobilitydata.gtfsvalidator.notice.NoticeContainer;
import org.mobilitydata.gtfsvalidator.notice.SeverityLevel;
import org.mobilitydata.gtfsvalidator.notice.ValidationNotice;
import org.mobilitydata.gtfsvalidator.table.GtfsStopTime;
import org.mobilitydata.gtfsvalidator.table.GtfsStopTimeTableContainer;
import org.mobilitydata.gtfsvalidator.type.GtfsTime;

/**
 * Validates that fields {@code arrival_time}, {@code departure_time} and {@code
 * shape_dist_traveled} are non-decreasing along each trip.
 *
 * <p> Generated notices:
 *  <ul>
 *    <li> {@link TripWithOutOfOrderArrivalTimeNotice}
 *    <li> {@link TripWithOutOfOrderDepartureTimeNotice}
 *    <li> {@link TripWithOutOfOrderShapeDistTraveledNotice}
 * </ul>
 */
@GtfsValidator
public class StopTimeInSequenceOrderValidator extends FileValidator {
  private final GtfsStopTimeTableContainer stopTimeTable;

  @Inject
  StopTimeInSequenceOrderValidator(GtfsStopTimeTableContainer stopTimeTable) {
    this.stopTimeTable = stopTimeTable;
  }

  @Override
  public void validate(NoticeContainer noticeContainer) {
    for (List<GtfsStopTime> stopTimes : Multimaps.asMap(stopTimeTable.byTripIdMap()).values()) {
      GtfsTime lastArrival = null;
      GtfsTime lastDeparture = null;
      double lastShapeDistTraveled = 0;
      for (GtfsStopTime stopTime : stopTimes) {
        if (stopTime.hasArrivalTime()) {
          if (lastArrival != null && lastArrival.isAfter(stopTime.arrivalTime())) {
            noticeContainer.addValidationNotice(new TripWithOutOfOrderArrivalTimeNotice(stopTime));
          }
          lastArrival = stopTime.arrivalTime();
        }

        if (stopTime.hasDepartureTime()) {
          if (lastDeparture != null && lastDeparture.isAfter(stopTime.departureTime())) {
            noticeContainer.addValidationNotice(
                new TripWithOutOfOrderDepartureTimeNotice(stopTime));
          }
          lastDeparture = stopTime.departureTime();
        }

        // Some feeds skip shape_dist_traveled in the middle of the trip. This approach is incorrect
        // and there will be a warning generated by another validator.
        if (stopTime.hasShapeDistTraveled()) {
          if (stopTime.shapeDistTraveled() < lastShapeDistTraveled) {
            noticeContainer.addValidationNotice(
                new TripWithOutOfOrderShapeDistTraveledNotice(stopTime));
          }
          lastShapeDistTraveled = stopTime.shapeDistTraveled();
        }
      }
    }
  }

  /** Describes a stop time that has {@code arrival_time} earlier than for the previous entity. */
  static class TripWithOutOfOrderArrivalTimeNotice extends ValidationNotice {
    private final long csvRowNumber;
    private final String tripId;
    private final int stopSequence;
    private final GtfsTime arrivalTime;

    TripWithOutOfOrderArrivalTimeNotice(GtfsStopTime stopTime) {
      super(SeverityLevel.ERROR);
      this.csvRowNumber = stopTime.csvRowNumber();
      this.tripId = stopTime.tripId();
      this.stopSequence = stopTime.stopSequence();
      this.arrivalTime = stopTime.arrivalTime();
    }
  }

  /** Describes a stop time that has {@code departure_time} earlier than for the previous entity. */
  static class TripWithOutOfOrderDepartureTimeNotice extends ValidationNotice {
    private final long csvRowNumber;
    private final String tripId;
    private final int stopSequence;
    private final GtfsTime departureTime;

    TripWithOutOfOrderDepartureTimeNotice(GtfsStopTime stopTime) {
      super(SeverityLevel.ERROR);
      this.csvRowNumber = stopTime.csvRowNumber();
      this.tripId = stopTime.tripId();
      this.stopSequence = stopTime.stopSequence();
      this.departureTime = stopTime.departureTime();
    }
  }

  /**
   * Describes a stop time that has {@code shape_dist_traveled} less than for the previous entity.
   */
  static class TripWithOutOfOrderShapeDistTraveledNotice extends ValidationNotice {
    private final long csvRowNumber;
    private final String tripId;
    private final int stopSequence;
    private final double shapeDistTraveled;

    TripWithOutOfOrderShapeDistTraveledNotice(GtfsStopTime stopTime) {
      super(SeverityLevel.ERROR);
      this.csvRowNumber = stopTime.csvRowNumber();
      this.tripId = stopTime.tripId();
      this.stopSequence = stopTime.stopSequence();
      this.shapeDistTraveled = stopTime.shapeDistTraveled();
    }
  }
}
