/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.mobilitydata.gtfsvalidator.table;

import java.util.List;

/**
 * Container for {@code GtfsEntity} instances for the whole GTFS table, e.g., stops.txt.
 *
 * <p>Its subclasses are generated by annotation processor based on GTFS schema annotations.
 * Instances of the subclasses are created by subclasses of {@code GtfsTableLoader} which are also
 * generated by the processor.
 *
 * @param <T> subclass of {@code GtfsEntity}
 */
public abstract class GtfsTableContainer<T extends GtfsEntity> {
  private boolean emptyFile = false;
  private boolean missingFile = false;
  private boolean invalidHeaders = false;

  public abstract Class<T> getEntityClass();

  public int entityCount() {
    return getEntities().size();
  }

  public abstract List<T> getEntities();

  public abstract String gtfsFilename();

  /**
   * Tells if the file is empty, i.e. it has no rows and even no headers.
   *
   * @return true if the file is empty, false otherwise
   */
  public boolean isEmptyFile() {
    return emptyFile;
  }

  public void setEmptyFile(boolean emptyFile) {
    this.emptyFile = emptyFile;
  }

  /**
   * Tells if the file is missing.
   *
   * @return true if the file is missing, false otherwise
   */
  public boolean isMissingFile() {
    return missingFile;
  }

  public void setMissingFile(boolean missingFile) {
    this.missingFile = missingFile;
  }

  public boolean hasInvalidHeaders() {
    return invalidHeaders;
  }

  /**
   * Tells if the file is invalid headers, e.g., some required headers are missing.
   *
   * <p>Note that unknown headers are not considered invalid.
   *
   * @return true if the file has invalid headers, false otherwise
   */
  public void setInvalidHeaders(boolean invalidHeaders) {
    this.invalidHeaders = invalidHeaders;
  }
}
