/*
 * Copyright (c) 2020. MobilityData IO.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// so we can aggregate all Javadocs in one
// see: https://github.com/nebula-plugins/gradle-aggregate-javadocs-plugin
buildscript {
    repositories { mavenCentral() }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
    id 'java'
    // id 'com.github.sherter.google-java-format' version '0.9'
    id "com.diffplug.spotless" version "6.2.0"
}

spotless {
  // Copied and modified from the readme at
  // https://github.com/diffplug/spotless/tree/main/plugin-gradle#google-java-format

  format 'misc', {
    // define the files to apply `misc` to
    // target '*.gradle', '*.md', '.gitignore'
    target '*.gradle', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }
  java {
    // don't need to set target, it is inferred from java

    // apply a specific flavor of google-java-format
    googleJavaFormat('1.13.0')
  }
}

repositories {
    mavenCentral()
}

apply plugin: 'nebula-aggregate-javadocs'

// A resolvable configuration to collect test reports data
configurations {
    testReportData {
        canBeResolved = true
        canBeConsumed = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'test-report-data'))
        }
    }
}

dependencies {
    testReportData project('main')
    testReportData project(':processor')
    testReportData project(':core')
}

tasks.register('testReport', TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Use test results from testReportData configuration
    testResultDirs.from(configurations.testReportData)
}

// Utility class for generateViewerAssets task.
class FileToLiteralString {
    static String escapeString(String s) {
        var backslash = java.util.regex.Pattern.compile("\\\\")
        var doublequote = java.util.regex.Pattern.compile("\"")
        var escapedBackslashes = backslash.matcher(s).replaceAll("\\\\\\\\")
        var escaptedQuotes = doublequote.matcher(escapedBackslashes).replaceAll("\\\\\\\"")
        return "\"" + escaptedQuotes + "\\n\""
    }

    static void generateMethod(FileWriter out, String assetFilename, String methodName) {
        var file = new FileReader(assetFilename)
        out.println "  public static String " + methodName + "() {"
        var i = 0
        file.eachLine { line ->
            if (i++ == 0) {
                out.print "    return " + FileToLiteralString.escapeString(line)
            } else {
                out.print "\n        + " + FileToLiteralString.escapeString(line)
            }
        }
        out.println ";"
        out.println "  }"
    }
}

task generateViewerAssets {
    doFirst {
        var viewerDir = "./main/src/main/java/org/mobilitydata/gtfsvalidator/viewer/"
        var viewerAssets = new FileWriter(viewerDir + "ViewerAssets.java")

        // Copy the license text and class name from a boilerplate file.
        var viewerAssetsBoiler = new FileReader(viewerDir + "ViewerAssets.boilerplate.java.fragment")
        viewerAssets.println "// Code generated by gradle generateViewerAssets; DO NOT EDIT."
        viewerAssetsBoiler.eachLine { line ->
            viewerAssets.println line
        }

        // Generate a method for each asset file, which returns its contents as
        // a literal string.
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + "index.css", "IndexCss")

        // google-java-style validator prefers one blank line between methods.
        viewerAssets.println ""
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + 'index.js', "IndexJs")

        viewerAssets.println ""
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + 'snabbdom.browser.js', "SnabbdomBrowserJs")

        viewerAssets.println ""
        FileToLiteralString.generateMethod(viewerAssets, viewerDir + 'form.html', "FormHtml")

        viewerAssets.println "}" // Final closing brace.
        viewerAssets.close()
    }
}
